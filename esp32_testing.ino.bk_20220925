
#include <BleKeyboard.h>

#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978



BleKeyboard bleKeyboard;

int longPressDelay = 350;           //customizable keyboard values
int spamSpeed = 15;
int cClock = 0;
int cPulse = 0;
int lastActive = 0;
int lastPulseCheck = 0;
int pulseCount = 0;
int profile = 1;
bool bleConnected = false;
bool numlock = true;



#define TIME_TO_SLEEP 120 /* Time ESP32 will go to sleep (in seconds) */


#define totalProfile sizeof(profiles)/sizeof(profiles[0])

#define seconds() (millis()/1000)

#define KEY_NA            0x00
#define KEY_DELETE        0xD4
#define KEY_BACKSPACE     0xB2
#define KEY_DELETE        0xD4

// Numeric keypad
#define KEY_NUM_LOCK      0xDB
#define KEY_KP_SLASH      0xDC
#define KEY_KP_ASTERISK   0xDD
#define KEY_KP_MINUS      0xDE
#define KEY_KP_PLUS       0xDF
#define KEY_KP_ENTER      0xE0
#define KEY_KP_1          0xE1
#define KEY_KP_2          0xE2
#define KEY_KP_3          0xE3
#define KEY_KP_4          0xE4
#define KEY_KP_5          0xE5
#define KEY_KP_6          0xE6
#define KEY_KP_7          0xE7
#define KEY_KP_8          0xE8
#define KEY_KP_9          0xE9
#define KEY_KP_0          0xEA
#define KEY_KP_DOT        0xEB

int alphaBits[20][7] = {
  {0, 1, 1, 1, 1, 1, 1}, // 0
  {0, 0, 0, 1, 0, 0, 1}, // 1
  {1, 0, 1, 1, 1, 1, 0}, // 2
  {1, 0, 1, 1, 0, 1, 1},
  {1, 1, 0, 1, 0, 0, 1},
  {1, 1, 1, 0, 0, 1, 1},
  {1, 1, 1, 0, 1, 1, 1},
  {0, 0, 1, 1, 0, 0, 1},
  {1, 1, 1, 1, 1, 1, 1},
  {1, 1, 1, 1, 0, 0, 1}, // 9
  {1, 1, 1, 1, 1, 0, 1},
  {0, 1, 1, 0, 1, 1, 0},
  {1, 0, 0, 1, 1, 1, 1},
  {1, 1, 1, 0, 1, 1, 0},
  {1, 1, 1, 0, 1, 0, 0},
  {1, 1, 0, 1, 1, 0, 1}, //H
  {0, 1, 0, 0, 1, 1, 0},
  {1, 0, 0, 0, 1, 0, 1},
  {1, 0, 0, 0, 1, 0, 0},
  {0, 1, 0, 1, 1, 1, 1},
};
char characters[] = {
  '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \
  'A', 'C', 'D', 'E', 'F', 'H', 'L', 'N', 'R', 'U'
};

#define totalChar sizeof(characters)/sizeof(characters[0])

int buzzerPin = 21;
int enterPin = 34;
byte segmentPins[] = {19, 18, 5, 17, 16, 4, 2, 15};
char profiles[] = {'1', '2', '3', '4', '5', '6', '7', '8', '9'};

//declaring inputs and outputs
byte inputs[] = {23, 26, 27, 14, 12, 13};
#define inCount sizeof(inputs)/sizeof(inputs[0])
byte outputs[] = {32, 33, 25, 22, 34};
#define outCount sizeof(outputs)/sizeof(outputs[0])

char sysLayout[outCount][inCount] = {
  {'A', 'L', '7', '4', '1', 'p'},
  {'B', '/', '8', '5', '2', '0'},
  {'C', '*', '9', '6', '3', '.'},
  {'D', '-', '+', 'y', 'u', 'i'},
  {'E', 'f', 'g', 'h', 'j', 'k'}
};

int layout1[outCount][inCount] = {
  {KEY_NA, KEY_NUM_LOCK, KEY_KP_7, KEY_KP_4, KEY_KP_1, KEY_NA},
  {KEY_NA, KEY_KP_SLASH, KEY_KP_8, KEY_KP_5, KEY_KP_2, KEY_KP_0},
  {KEY_BACKSPACE, KEY_KP_ASTERISK, KEY_KP_9, KEY_KP_6, KEY_KP_3, KEY_KP_DOT},
  {KEY_DELETE, KEY_KP_MINUS, KEY_KP_PLUS, KEY_NA, KEY_NA, KEY_NA},
  {KEY_KP_ENTER, KEY_NA, KEY_NA, KEY_NA, KEY_NA, KEY_NA}
};


int keyDown[outCount][inCount];
bool keyLong[outCount][inCount];


void setup() {

  Serial.begin(115200);

  for (int i = 0; i < 8; i++) {
    pinMode(segmentPins[i], OUTPUT);
  }

  for (int i = 0; i < outCount; i++) { //declaring all the outputs and setting them high
    if (i == outCount - 1) {
      break;
    }
    pinMode(outputs[i], OUTPUT);
    digitalWrite(outputs[i], HIGH);
  }
  for (int i = 0; i < inCount; i++) { //declaring all the inputs and activating the internal pullup resistor
    pinMode(inputs[i], INPUT_PULLUP);
  }

  // put your setup code here, to run once:
  pinMode(enterPin, INPUT);
  pinMode(buzzerPin, OUTPUT);

  bleKeyboard.begin();

  //ESP_EXT1_WAKEUP_ANY_HIGH
  esp_sleep_enable_ext0_wakeup(GPIO_NUM_34, 1);
  sound_start();

  lastActive = seconds();
  lastPulseCheck = millis();
  pulseCount = 0;
}

void loop() {

  int idle_time = seconds() - lastActive;
  if (idle_time >= TIME_TO_SLEEP) {
    go_to_sleep();
  }

  if (bleKeyboard.isConnected()) {
    bleConnected = true;
    set_dot(numlock);
    show_character(profiles[profile - 1]);
    pulseCount = 0;
  } else {
    if (bleConnected == true) {
      show_character('*');
      bleConnected = false;
      pulseCount = 0;
    }

    if (millis() - lastPulseCheck >= 1500) {
      toggle_dot();
      lastPulseCheck = millis();
      sound_pulse();
      Serial.print("connectd: ");
      Serial.println(bleConnected);
      pulseCount = pulseCount + 1;
    }

    if (pulseCount > 10) {
      go_to_sleep();
    }
    
  }

  for (int i = 0; i < outCount; i++) {
    if (i == outCount - 1) {
      if (digitalRead(enterPin) == HIGH) {
        keyPressed(i, 0);
      } else if (keyDown[4][0] != 0) {
        resetKey(i, 0);
      }
      break;
    }
    digitalWrite(outputs[i], LOW);   //setting one row low
    delayMicroseconds(5);           //giving electronics time to settle down

    for (int j = 0; j < inCount; j++) {
      if (digitalRead(inputs[j]) == LOW) {
        keyPressed(i, j);           //calling keyPressed function if one of the inputs reads low
      }
      else if (keyDown[i][j] != 0) {  //resetting the key if it is not pressed any more
        resetKey(i, j);
      }
    }
    digitalWrite(outputs[i], HIGH);
    delayMicroseconds(500);         //setting the row high and waiting 0.5ms until next cycle
  }
}

void keyPressed(int row, int col) {

  if (keyDown[row][col] == 0) {        //if the function is called for the first time for this key

    send_key2(row, col);
    //    digitalWrite(buzzerPin, HIGH);
    //    delayMicroseconds(3500);
    //    digitalWrite(buzzerPin, LOW);
  }
  else if (keyLong[row][col] && keyDown[row][col] > spamSpeed) { //if the key has been held long enough to warrant another keystroke set
    send_key2(row, col);
    keyDown[row][col] = 1;
  }
  else if (keyDown[row][col] > longPressDelay) { //if the key has been held for longer that longPressDelay, it switches into spam mode
    keyLong[row][col] = true;
  }

  keyDown[row][col]++;

}

void resetKey(int row, int col) { //resetting the variables after key is released
  keyDown[row][col] = 0;
  keyLong[row][col] = false;
}

void send_key2(int row, int col) {
  char text = sysLayout[row][col];
  Serial.println(text);

  if (text == 'L') {
    toggle_numlock();
    return;
  }

  if (!numlock) {
    digitalWrite(buzzerPin, HIGH);
    delayMicroseconds(4000);
    digitalWrite(buzzerPin, LOW);
    if (text == 'C') {
      prevProfile();
      return;
    } else if (text == 'D') {
      nextProfile();
      return;
    }
  } else {
    digitalWrite(buzzerPin, HIGH);
    delayMicroseconds(500);
    digitalWrite(buzzerPin, LOW);
  }

  if (profile == 1) {
    if (text == 'A') {
      bleKeyboard.write(KEY_MEDIA_CALCULATOR);
    } else if (text == 'B') {
      bleKeyboard.write(KEY_MEDIA_MUTE);
    } else {
      bleKeyboard.write(layout1[row][col]);
    }
    return;
  } else if (profile == 2) {
    //    bleKeyboard.write(layout2[row][col]);
    return;
  }

  //  bleKeyboard.write(text);
}

void send_key(char text) {
  lastActive = seconds();
  Serial.println(text);
  if (bleKeyboard.isConnected()) {
    if (text == 'A') {
      bleKeyboard.write(KEY_MEDIA_CALCULATOR);
      return;
    }
    if (text == 'B') {
      bleKeyboard.write(KEY_MEDIA_MUTE);
      return;
    }
    if (text == 'C') {
      if (numlock) {
        bleKeyboard.write(KEY_BACKSPACE);
      } else {
        prevProfile();
      }
      return;
    }
    if (text == 'D') {
      nextProfile();
      return;
    }
    if (text == 'E') {
      bleKeyboard.write(KEY_RETURN);
      return;
    }
    if (text == 'L') {
      toggle_numlock();
      return;
    }
    bleKeyboard.write(text);
  }
}

void prevProfile() {
  profile = profile - 1;
  if (profile <= 1) {
    profile = 1;
    warn_buzzer(4000, 10000, 2);
  }
}

void nextProfile() {
  profile = profile + 1;
  if (profile >= totalProfile) {
    profile = totalProfile;
    warn_buzzer(4000, 10000, 2);
  }
}

void callback() {

}

void set_dot(bool state) {
  digitalWrite(segmentPins[7], state);
}

void clicky_sound() {
  warn_buzzer(7000, 0, 1);
}

void toggle_dot() {
  digitalWrite(segmentPins[7], !digitalRead(segmentPins[7]));
}

void toggle_numlock() {
  clicky_sound();
  numlock = !numlock;
}

void go_to_sleep() {
  Serial.println("Going to sleep");
  for (int i = 0; i < outCount; i++) {
    if (i == outCount - 1) {
      break;
    }
    digitalWrite(outputs[i], LOW);
  }
  for (int i = 0; i < inCount; i++) {
    pinMode(inputs[i], LOW);
  }
  esp_deep_sleep_start();
};

void show_character(char character) {
  if (character == '*') {
    for (int j = 0; j < 7; j++) {
      digitalWrite(segmentPins[j], LOW);
    }
    return;
  }

  for (int i = 0; i < totalChar; i++) {
    if (character == characters[i]) {
      for (int j = 0; j < 7; j++) {
        digitalWrite(segmentPins[j], alphaBits[i][j]);
      }
    }
  }
}

void warn_buzzer(int vol, int freq, int count) {
  int min_vol = 30; //min=20
  int min_freq = 100000; // min=2000
  int min_count = 1; // min=1

  if (vol < min_vol) {
    vol = min_vol;
  }
  if (freq < min_freq) {
    freq = min_freq;
  }
  if (count < min_count) {
    count = min_count;
  }

  for (int i = 1; i < count; i++) {
    digitalWrite(buzzerPin, HIGH);
    delayMicroseconds(vol);
    digitalWrite(buzzerPin, LOW);
    delayMicroseconds(freq);
  }

  digitalWrite(buzzerPin, HIGH);
  delayMicroseconds(vol);
  digitalWrite(buzzerPin, LOW);
}

void sound_pulse() {
  int melody[] = {
    NOTE_C6, 8, NOTE_C7, 16, NOTE_C8, 16,
  };
  player(melody, sizeof(melody) / sizeof(melody[0]), 200, 0.7, 0.2);
}

void sound_start() {
  int melody[] = {
    NOTE_E6, 8, NOTE_G6, 8, NOTE_E7, 8,
    NOTE_C7, 8, NOTE_D7, -8, NOTE_G7, 8,
  };
  player(melody, sizeof(melody) / sizeof(melody[0]), 200, 0.4, 0.7);
}

void player(int melody[], int count, int tempo, float note_ratio, float pause_ratio) {

  //  int tempo = 144;
  int wholenote = (60000 * 4) / tempo;
  int divider = 0, noteDuration = 0;
  int notes = count;

  // iterate over the notes of the melody.
  // Remember, the array is twice the number of notes (notes + durations)
  for (int i = 0; i < notes * 2 ; i = i + 2) {

    // calculates the duration of each note
    divider = melody[i + 1];
    if (divider > 0) {
      // regular note, just proceed
      noteDuration = (wholenote) / divider;
    } else if (divider < 0) {
      // dotted notes are represented with negative durations!!
      noteDuration = (wholenote) / abs(divider);
      noteDuration *= 1.5; // increases the duration in half for dotted notes
    }

    // we only play the note for 90% of the duration, leaving 10% as a pause
    tone(buzzerPin, melody[i], noteDuration * note_ratio);

    // Wait for the specief duration before playing the next note.
    delay(noteDuration * pause_ratio);

    // stop the waveform generation before the next note.
    noTone(buzzerPin);
  }
}
